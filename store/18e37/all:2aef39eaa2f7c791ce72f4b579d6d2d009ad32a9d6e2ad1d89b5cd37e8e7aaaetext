{"type":"object","value":{"https://www.npmjs.com/package/split2":"{\"type\":\"string\",\"value\":\"skip to:contentpackage searchsign in\\n❤\\n * Pro [/products/pro]\\n * Teams [/products/teams]\\n * Pricing [/products]\\n * Documentation [https://docs.npmjs.com]\\n\\nnpm\\n/\\n\\nSearch\\nSign Up [/signup]Sign In [/login]\\n\\n\\nSPLIT2\\nDefinitelyTyped icon, indicating that this package has TypeScript declarations\\nprovided by the separate @types/split2 package\\n[https://static-production.npmjs.com/6d9930e83bbb43bba93e22eda2871b55.svg]/package/@types/split2\\n\\n4.2.0 • Public • Published a year ago\\n * Readme [?activeTab=readme]\\n * Code Beta [?activeTab=code]\\n * 0 Dependencies [?activeTab=dependencies]\\n * 1,377 Dependents [?activeTab=dependents]\\n * 22 Versions [?activeTab=versions]\\n\\n\\nSPLIT2(MATCHER, MAPPER, OPTIONS)\\n\\nci\\n[https://github.com/mcollina/split2/workflows/ci/badge.svg]https://github.com/mcollina/split2/workflows/ci/badge.svg\\n\\nBreak up a stream and reassemble it so that each line is a chunk. split2 is\\ninspired by @dominictarr [https://github.com/dominictarr] split\\n[https://github.com/dominictarr/split] module, and it is totally API compatible\\nwith it. However, it is based on Node.js core Transform\\n[https://nodejs.org/api/stream.html#stream_new_stream_transform_options].\\n\\nmatcher may be a String, or a RegExp. Example, read every line in a file ...\\n\\n  fs.createReadStream(file)\\n    .pipe(split2())\\n    .on('data', function (line) {\\n      //each chunk now is a separate line!\\n    })\\n\\nsplit takes the same arguments as string.split except it defaults to '/\\\\r?\\\\n/',\\nand the optional limit paremeter is ignored. String#split\\n[https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/split]\\n\\nsplit takes an optional options object on it's third argument, which is directly\\npassed as a Transform\\n[https://nodejs.org/api/stream.html#stream_new_stream_transform_options] option.\\n\\nAdditionally, the .maxLength and .skipOverflow options are implemented, which\\nset limits on the internal buffer size and the stream's behavior when the limit\\nis exceeded. There is no limit unless maxLength is set. When the internal buffer\\nsize exceeds maxLength, the stream emits an error by default. You may also set\\nskipOverflow to true to suppress the error and instead skip past any lines that\\ncause the internal buffer to exceed maxLength.\\n\\nCalling .destroy will make the stream emit close. Use this to perform cleanup\\nlogic\\n\\nvar splitFile = function(filename) {\\n  var file = fs.createReadStream(filename)\\n\\n  return file\\n    .pipe(split2())\\n    .on('close', function() {\\n      // destroy the file stream in case the split stream was destroyed\\n      file.destroy()\\n    })\\n}\\n\\nvar stream = splitFile('my-file.txt')\\n\\nstream.destroy() // will destroy the input file stream\\n\\n\\nNDJ - NEWLINE DELIMITED JSON\\n\\nsplit2 accepts a function which transforms each line.\\n\\nfs.createReadStream(file)\\n  .pipe(split2(JSON.parse))\\n  .on('data', function (obj) {\\n    //each chunk now is a js object\\n  })\\n  .on(\\\"error\\\", function(error) {\\n    //handling parsing errors\\n  })\\n\\nHowever, in @dominictarr [https://github.com/dominictarr] split\\n[https://github.com/dominictarr/split] the mapper is wrapped in a try-catch,\\nwhile here it is not: if your parsing logic can throw, wrap it yourself.\\nOtherwise, you can also use the stream error handling when mapper function\\nthrow.\\n\\n\\nLICENSE\\n\\nCopyright (c) 2014-2021, Matteo Collina hello@matteocollina.com\\n[hello@matteocollina.com]\\n\\nPermission to use, copy, modify, and/or distribute this software for any purpose\\nwith or without fee is hereby granted, provided that the above copyright notice\\nand this permission notice appear in all copies.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\\nFITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\\nTORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\\nTHIS SOFTWARE.\\n\\n\\nREADME\\n\\n\\nKEYWORDS\\n\\nnone\\n\\n\\n\\n\\n\\n\\n\\nPACKAGE SIDEBAR\\n\\n\\nINSTALL\\n\\nnpm i split2\\n\\n\\nREPOSITORY\\n\\nGitgithub.com/mcollina/split2 [https://github.com/mcollina/split2]\\n\\n\\nHOMEPAGE\\n\\ngithub.com/mcollina/split2#readme [https://github.com/mcollina/split2#readme]\\n\\n\\nDOWNLOADSWEEKLY DOWNLOADS\\n\\n17,469,410\\n\\n\\nVERSION\\n\\n4.2.0\\n\\n\\nLICENSE\\n\\nISC\\n\\n\\nUNPACKED SIZE\\n\\n17.4 kB\\n\\n\\nTOTAL FILES\\n\\n6\\n\\n\\nLAST PUBLISH\\n\\na year ago\\n\\n\\nCOLLABORATORS\\n\\n * matteo.collina\\n   [/npm-avatar/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdmF0YXJVUkwiOiJodHRwczovL3MuZ3JhdmF0YXIuY29tL2F2YXRhci9jM2ZjNzM3MGJjMDk1MWZiYTk0NGI3YjhjYWM1YjljYz9zaXplPTEwMCZkZWZhdWx0PXJldHJvIn0.2735RDAi_avZ7jDl8X5eYXkrSEO_pVfVGcD6dGYgrMg]/~matteo.collina\\n\\nTry on RunKit [https://runkit.com/npm/split2]\\nReport malware\\n[/support?inquire=security&security-inquire=malware&package=split2&version=4.2.0]\\n\\n\\nFOOTER\\n\\nhttps://github.com/npm\\nhttps://github.com\\n\\n\\nSUPPORT\\n\\n * Help [https://docs.npmjs.com]\\n * Advisories [https://github.com/advisories]\\n * Status [http://status.npmjs.org/]\\n * Contact npm [/support]\\n\\n\\nCOMPANY\\n\\n * About [/about]\\n * Blog [https://github.blog/tag/npm/]\\n * Press [/press]\\n\\n\\nTERMS & POLICIES\\n\\n * Policies [/policies/]\\n * Terms of Use [/policies/terms]\\n * Code of Conduct [/policies/conduct]\\n * Privacy [/policies/privacy]\\n\\n\"}"}}