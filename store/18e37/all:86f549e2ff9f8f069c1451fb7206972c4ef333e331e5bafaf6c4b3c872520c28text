{"type":"object","value":{"https://www.npmjs.com/package/@contentful/rich-text-react-renderer":"{\"type\":\"string\",\"value\":\"skip to:contentpackage searchsign in\\n❤\\n * Pro [/products/pro]\\n * Teams [/products/teams]\\n * Pricing [/products]\\n * Documentation [https://docs.npmjs.com]\\n\\nnpm\\n/\\n\\nSearch\\nSign Up [/signup]Sign In [/login]\\n\\n\\n@CONTENTFUL/RICH-TEXT-REACT-RENDERER\\nTypeScript icon, indicating that this package has built-in type declarations\\n[https://static-production.npmjs.com/255a118f56f5346b97e56325a1217a16.svg]\\n\\n15.19.6 • Public • Published 2 months ago\\n * Readme [?activeTab=readme]\\n * Code Beta [?activeTab=code]\\n * 1 Dependency [?activeTab=dependencies]\\n * 140 Dependents [?activeTab=dependents]\\n * 46 Versions [?activeTab=versions]\\n\\n\\nRICH-TEXT-REACT-RENDERER\\n\\nReact renderer for the Contentful rich text field type.\\n\\n\\nINSTALLATION\\n\\nUsing npm [http://npmjs.org/]:\\n\\nnpm install @contentful/rich-text-react-renderer\\n\\nUsing yarn [https://yarnpkg.com/]:\\n\\nyarn add @contentful/rich-text-react-renderer\\n\\n\\nUSAGE\\n\\nimport { documentToReactComponents } from '@contentful/rich-text-react-renderer';\\n\\nconst document = {\\n  nodeType: 'document',\\n  data: {},\\n  content: [\\n    {\\n      nodeType: 'paragraph',\\n      data: {},\\n      content: [\\n        {\\n          nodeType: 'text',\\n          value: 'Hello world!',\\n          marks: [],\\n          data: {},\\n        },\\n      ],\\n    },\\n  ],\\n};\\n\\ndocumentToReactComponents(document); // -> <p>Hello world!</p>\\n\\nimport { documentToReactComponents } from '@contentful/rich-text-react-renderer';\\n\\nconst document = {\\n  nodeType: 'document',\\n  content: [\\n    {\\n      nodeType: 'paragraph',\\n      content: [\\n        {\\n          nodeType: 'text',\\n          value: 'Hello',\\n          marks: [{ type: 'bold' }],\\n        },\\n        {\\n          nodeType: 'text',\\n          value: ' world!',\\n          marks: [{ type: 'italic' }],\\n        },\\n      ],\\n    },\\n  ],\\n};\\n\\ndocumentToReactComponents(document);\\n// -> <p><b>Hello</b><u> world!</u></p>\\n\\nYou can also pass custom renderers for both marks and nodes as an optional\\nparameter like so:\\n\\nimport { BLOCKS, MARKS } from '@contentful/rich-text-types';\\nimport { documentToReactComponents } from '@contentful/rich-text-react-renderer';\\n\\nconst document = {\\n  nodeType: 'document',\\n  content: [\\n    {\\n      nodeType: 'paragraph',\\n      content: [\\n        {\\n          nodeType: 'text',\\n          value: 'Hello',\\n          marks: [{ type: 'bold' }],\\n        },\\n        {\\n          nodeType: 'text',\\n          value: ' world!',\\n          marks: [{ type: 'italic' }],\\n        },\\n      ],\\n    },\\n  ],\\n};\\n\\nconst Bold = ({ children }) => <p className=\\\"bold\\\">{children}</p>;\\n\\nconst Text = ({ children }) => <p className=\\\"align-center\\\">{children}</p>;\\n\\nconst options = {\\n  renderMark: {\\n    [MARKS.BOLD]: (text) => <Bold>{text}</Bold>,\\n  },\\n  renderNode: {\\n    [BLOCKS.PARAGRAPH]: (node, children) => <Text>{children}</Text>,\\n  },\\n  renderText: (text) => text.replace('!', '?'),\\n};\\n\\ndocumentToReactComponents(document, options);\\n// -> <p class=\\\"align-center\\\"><p class=\\\"bold\\\">Hello</p><u> world?</u></p>\\n\\nLast, but not least, you can pass a custom rendering component for an embedded\\nentry:\\n\\nimport { BLOCKS } from '@contentful/rich-text-types';\\nimport { documentToReactComponents } from '@contentful/rich-text-react-renderer';\\n\\nconst document = {\\n  nodeType: 'document',\\n  content: [\\n    {\\n      nodeType: 'embedded-entry-block',\\n      data: {\\n        target: (...)Link<'Entry'>(...);\\n      },\\n    },\\n  ]\\n};\\n\\nconst CustomComponent = ({ title, description }) => (\\n  <div>\\n    <h2>{title}</h2>\\n    <p>{description}</p>\\n  </div>\\n);\\n\\nconst options = {\\n  renderNode: {\\n    [BLOCKS.EMBEDDED_ENTRY]: (node) => {\\n      const { title, description } = node.data.target.fields;\\n      return <CustomComponent title={title} description={description} />\\n    }\\n  }\\n};\\n\\ndocumentToReactComponents(document, options);\\n// -> <div><h2>[title]</h2><p>[description]</p></div>\\n\\nThe renderNode keys should be one of the following BLOCKS and INLINES properties\\nas defined in @contentful/rich-text-types\\n[https://www.npmjs.com/package/@contentful/rich-text-types]:\\n\\n * BLOCKS\\n   \\n   * DOCUMENT\\n   * PARAGRAPH\\n   * HEADING_1\\n   * HEADING_2\\n   * HEADING_3\\n   * HEADING_4\\n   * HEADING_5\\n   * HEADING_6\\n   * UL_LIST\\n   * OL_LIST\\n   * LIST_ITEM\\n   * QUOTE\\n   * HR\\n   * EMBEDDED_ENTRY\\n   * EMBEDDED_ASSET\\n   * EMBEDDED_RESOURCE\\n\\n * INLINES\\n   \\n   * EMBEDDED_ENTRY (this is different from the BLOCKS.EMBEDDED_ENTRY)\\n   * EMBEDDED_RESOURCE\\n   * HYPERLINK\\n   * ENTRY_HYPERLINK\\n   * ASSET_HYPERLINK\\n   * RESOURCE_HYPERLINK\\n\\nThe renderMark keys should be one of the following MARKS properties as defined\\nin @contentful/rich-text-types\\n[https://www.npmjs.com/package/@contentful/rich-text-types]:\\n\\n * BOLD\\n * ITALIC\\n * UNDERLINE\\n * CODE\\n\\nThe renderText callback is a function that has a single string argument and\\nreturns a React node. Each text node is evaluated individually by this callback.\\nA possible use case for this is to replace instances of \\\\n produced by Shift +\\nEnter with <br/> React elements. This could be accomplished in the following\\nway:\\n\\nconst options = {\\n  renderText: (text) => {\\n    return text.split('\\\\n').reduce((children, textSegment, index) => {\\n      return [...children, index > 0 && <br key={index} />, textSegment];\\n    }, []);\\n  },\\n};\\n\\nNOTE ON ADDING A KEY PROP IN CUSTOM RENDERERS:\\n\\nIt is possible to pass a key prop in the components returned by custom\\nrenderers. A good use case for this is in embeded entries using the node's\\ntarget.sys.id. It is important not to pass anything that is index-like (e.g. 1\\nor \\\"1\\\") as it may clash with the default renderers which automatically inject a\\nkey prop using their index in the Contentful rich text AST.\\n\\nTo work around this limitation, just append any non-numeric character to your\\ncustom key.\\n\\nconst options = {\\n  renderMark: {\\n    [MARKS.BOLD]: (text) => {\\n      return <b key={`${text}-key`}>{text}</b>;\\n    },\\n  },\\n};\\n\\nPRESERVING WHITESPACE\\n\\nThe options object can include a preserveWhitespace boolean flag. When set to\\ntrue, this flag ensures that multiple spaces in the rich text content are\\npreserved by replacing them with &nbsp;, and line breaks are maintained with <br\\n/> tags. This is useful for content that relies on specific formatting using\\nspaces and line breaks.\\n\\nimport { documentToReactComponents } from '@contentful/rich-text-react-renderer';\\n\\nconst document = {\\n  nodeType: 'document',\\n  content: [\\n    {\\n      nodeType: 'paragraph',\\n      content: [\\n        {\\n          nodeType: 'text',\\n          value: 'Hello     world!',\\n          marks: [],\\n        },\\n      ],\\n    },\\n  ],\\n};\\n\\nconst options = {\\n  preserveWhitespace: true,\\n};\\n\\ndocumentToReactComponents(document, options);\\n// -> <p>Hello&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;world!</p>\\n\\nIn this example, the multiple spaces between \\\"Hello\\\" and \\\"world!\\\" are preserved\\nin the rendered output.\\n\\n\\nREADME\\n\\n\\nKEYWORDS\\n\\nnone\\n\\n\\n\\n\\n\\n\\n\\nPACKAGE SIDEBAR\\n\\n\\nINSTALL\\n\\nnpm i @contentful/rich-text-react-renderer\\n\\n\\nREPOSITORY\\n\\nGitgithub.com/contentful/rich-text [https://github.com/contentful/rich-text]\\n\\n\\nHOMEPAGE\\n\\ngithub.com/contentful/rich-text#readme\\n[https://github.com/contentful/rich-text#readme]\\n\\n\\nDOWNLOADSWEEKLY DOWNLOADS\\n\\n377,468\\n\\n\\nVERSION\\n\\n15.19.6\\n\\n\\nLICENSE\\n\\nMIT\\n\\n\\nUNPACKED SIZE\\n\\n141 kB\\n\\n\\nTOTAL FILES\\n\\n77\\n\\n\\nLAST PUBLISH\\n\\n2 months ago\\n\\n\\nCOLLABORATORS\\n\\n * michaelpearce\\n   [/npm-avatar/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdmF0YXJVUkwiOiJodHRwczovL3MuZ3JhdmF0YXIuY29tL2F2YXRhci9hYzUwYzU4Yzc0YTBlMGQ4MDg3ODBlNTMzZjE0N2ExOT9zaXplPTEwMCZkZWZhdWx0PXJldHJvIn0.VF_brgWV1GXyiy7Gw8rfXIM40sR2zRyRrRKaYwrwRls]/~michaelpearce\\n * it-internal\\n   [/npm-avatar/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdmF0YXJVUkwiOiJodHRwczovL3MuZ3JhdmF0YXIuY29tL2F2YXRhci80NDMxYThmODIzZjE4YWFjZGVjMjNlZWI2OTk5ZDE1OT9zaXplPTEwMCZkZWZhdWx0PXJldHJvIn0.VeUJxrBvScJzmk9du8QhYeJzx7GOUX27T6EUFSVaMBE]/~it-internal\\n * whydah-gally\\n   [/npm-avatar/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdmF0YXJVUkwiOiJodHRwczovL3MuZ3JhdmF0YXIuY29tL2F2YXRhci9hODQ4MmJhMWM3Nzk3ZjcwNGE3OGUyZGU5Yzk1MGQ1NT9zaXplPTEwMCZkZWZhdWx0PXJldHJvIn0.qBgNtsfKv8J4xjHR0c0rbjcYwdd9szsLINt2T198C9Y]/~whydah-gally\\n * contentful-ecosystem\\n   [/npm-avatar/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdmF0YXJVUkwiOiJodHRwczovL3MuZ3JhdmF0YXIuY29tL2F2YXRhci84ZDE0YmZlOTJhZTdjYWUyZmFmZTQ0YzRiZjIyZjFhMz9zaXplPTEwMCZkZWZhdWx0PXJldHJvIn0.DsBvGuYzjZmB8OECSbwrYm8OqTTwQR_PJVx4zXB1nm0]/~contentful-ecosystem\\n\\nTry on RunKit [https://runkit.com/npm/%40contentful%2Frich-text-react-renderer]\\nReport malware\\n[/support?inquire=security&security-inquire=malware&package=%40contentful%2Frich-text-react-renderer&version=15.19.6]\\n\\n\\nFOOTER\\n\\nhttps://github.com/npm\\nhttps://github.com\\n\\n\\nSUPPORT\\n\\n * Help [https://docs.npmjs.com]\\n * Advisories [https://github.com/advisories]\\n * Status [http://status.npmjs.org/]\\n * Contact npm [/support]\\n\\n\\nCOMPANY\\n\\n * About [/about]\\n * Blog [https://github.blog/tag/npm/]\\n * Press [/press]\\n\\n\\nTERMS & POLICIES\\n\\n * Policies [/policies/]\\n * Terms of Use [/policies/terms]\\n * Code of Conduct [/policies/conduct]\\n * Privacy [/policies/privacy]\\n\\n\"}"}}