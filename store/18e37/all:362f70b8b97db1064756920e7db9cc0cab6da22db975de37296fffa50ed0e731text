{"type":"object","value":{"https://www.npmjs.com/package/replace-in-file":"{\"type\":\"string\",\"value\":\"skip to:contentpackage searchsign in\\n❤\\n * Pro [/products/pro]\\n * Teams [/products/teams]\\n * Pricing [/products]\\n * Documentation [https://docs.npmjs.com]\\n\\nnpm\\n/\\n\\nSearch\\nSign Up [/signup]Sign In [/login]\\n\\n\\nREPLACE-IN-FILE\\nTypeScript icon, indicating that this package has built-in type declarations\\n[https://static-production.npmjs.com/255a118f56f5346b97e56325a1217a16.svg]\\n\\n7.1.0 • Public • Published 4 months ago\\n * Readme [?activeTab=readme]\\n * Code Beta [?activeTab=code]\\n * 3 Dependencies [?activeTab=dependencies]\\n * 1,262 Dependents [?activeTab=dependents]\\n * 73 Versions [?activeTab=versions]\\n\\n\\nREPLACE IN FILE\\n\\nnpm version\\n[https://camo.githubusercontent.com/d2368d6bedb28755c98254c775fc63f342e0426d1127cc7d8c6fcb739c12c825/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f7265706c6163652d696e2d66696c652e737667]https://www.npmjs.com/package/replace-in-file\\nbuild status\\n[https://camo.githubusercontent.com/6970492015227282d574ce09264f4ccb87ccad78bf035a2952d591090a38b5c2/68747470733a2f2f7472617669732d63692e6f72672f6164616d726569736e7a2f7265706c6163652d696e2d66696c652e7376673f6272616e63683d6d6173746572]https://travis-ci.org/adamreisnz/replace-in-file\\ncoverage status\\n[https://camo.githubusercontent.com/572bd2bfb8cc3e7844a7f2310980f3b01ba355d290d845aec1cf7c0721ca8af4/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6164616d726569736e7a2f7265706c6163652d696e2d66696c652f62616467652e7376673f6272616e63683d6d6173746572]https://coveralls.io/github/adamreisnz/replace-in-file?branch=master\\ngithub issues\\n[https://camo.githubusercontent.com/32b65c4b1a35c9945338593ee0de29b7432029a1319c52227a8abafc69e28e8f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6164616d726569736e7a2f7265706c6163652d696e2d66696c652e737667]https://github.com/adamreisnz/replace-in-file/issues\\n\\nA simple utility to quickly replace text in one or more files or globs. Works\\nsynchronously or asynchronously with either promises or callbacks. Make a single\\nreplacement or multiple replacements at once.\\n\\n\\nINDEX\\n\\n * Installation\\n * Basic usage\\n   * Asynchronous replacement with async/await\\n   * Asynchronous replacement with promises\\n     [https://github.com/adamreisnz/replace-in-file/blob/HEAD/asynchronous-replacement-with-promises]\\n   * Asynchronous replacement with callback\\n   * Synchronous replacement\\n   * Return value\\n   * Counting matches and replacements\\n   * Custom processor\\n * Advanced usage\\n   * Replace a single file or glob\\n   * Replace multiple files or globs\\n   * Replace first occurrence only\\n   * Replace all occurrences\\n   * Multiple values with the same replacement\\n   * Custom regular expressions\\n   * Multiple values with different replacements\\n   * Using callbacks for from\\n   * Using callbacks for to\\n   * Ignore a single file or glob\\n   * Ignore multiple files or globs\\n   * Allow empty/invalid paths\\n   * Disable globs\\n   * Specify glob configuration\\n   * Making replacements on network drives\\n   * Specify character encoding\\n   * Dry run\\n   * File system\\n * CLI usage\\n * A note on using globs with the CLI\\n * Version information\\n * License\\n\\n\\nINSTALLATION\\n\\n# Using npm, installing to local project\\nnpm i --save replace-in-file\\n\\n# Using npm, installing globally for global cli usage\\nnpm i -g replace-in-file\\n\\n# Using yarn\\nyarn add replace-in-file\\n\\n\\nBASIC USAGE\\n\\n//Load the library and specify options\\nconst replace = require('replace-in-file');\\nconst options = {\\n  files: 'path/to/file',\\n  from: /foo/g,\\n  to: 'bar',\\n};\\n\\n\\nASYNCHRONOUS REPLACEMENT WITH ASYNC/AWAIT\\n\\ntry {\\n  const results = await replace(options)\\n  console.log('Replacement results:', results);\\n}\\ncatch (error) {\\n  console.error('Error occurred:', error);\\n}\\n\\n\\nASYNCHRONOUS REPLACEMENT WITH PROMISES\\n\\nreplace(options)\\n  .then(results => {\\n    console.log('Replacement results:', results);\\n  })\\n  .catch(error => {\\n    console.error('Error occurred:', error);\\n  });\\n\\n\\nASYNCHRONOUS REPLACEMENT WITH CALLBACK\\n\\nreplace(options, (error, results) => {\\n  if (error) {\\n    return console.error('Error occurred:', error);\\n  }\\n  console.log('Replacement results:', results);\\n});\\n\\n\\nSYNCHRONOUS REPLACEMENT\\n\\ntry {\\n  const results = replace.sync(options);\\n  console.log('Replacement results:', results);\\n}\\ncatch (error) {\\n  console.error('Error occurred:', error);\\n}\\n\\n\\nRETURN VALUE\\n\\nThe return value of the library is an array of replacement results against each\\nfile that was processed. This includes files in which no replacements were made.\\n\\nEach result contains the following values:\\n\\n * file: The path to the file that was processed\\n * hasChanged: Flag to indicate if the file was changed or not\\n\\nconst results = replace.sync({\\n  files: 'path/to/files/*.html',\\n  from: /foo/g,\\n  to: 'bar',\\n});\\n\\nconsole.log(results);\\n\\n// [\\n//   {\\n//     file: 'path/to/files/file1.html',\\n//     hasChanged: true,\\n//   },\\n//   {\\n//     file: 'path/to/files/file2.html',\\n//     hasChanged: true,\\n//   },\\n//   {\\n//     file: 'path/to/files/file3.html',\\n//     hasChanged: false,\\n//   },\\n// ]\\n\\nTo get an array of changed files, simply map the results as follows:\\n\\nconst changedFiles = results\\n  .filter(result => result.hasChanged)\\n  .map(result => result.file);\\n\\n\\nCOUNTING MATCHES AND REPLACEMENTS\\n\\nBy setting the countMatches configuration flag to true, the number of matches\\nand replacements per file will be counted and present in the results array.\\n\\n * numMatches: Indicates the number of times a match was found in the file\\n * numReplacements: Indicates the number of times a replacement was made in the\\n   file\\n\\nNote that the number of matches can be higher than the number of replacements if\\na match and replacement are the same string.\\n\\nconst results = replace.sync({\\n  files: 'path/to/files/*.html',\\n  from: /foo/g,\\n  to: 'bar',\\n  countMatches: true,\\n});\\n\\nconsole.log(results);\\n\\n// [\\n//   {\\n//     file: 'path/to/files/file1.html',\\n//     hasChanged: true,\\n//     numMatches: 3,\\n//     numReplacements: 3,\\n//   },\\n//   {\\n//     file: 'path/to/files/file2.html',\\n//     hasChanged: true,\\n//     numMatches: 1,\\n//     numReplacements: 1,\\n//   },\\n//   {\\n//     file: 'path/to/files/file3.html',\\n//     hasChanged: false,\\n//     numMatches: 0,\\n//     numReplacements: 0,\\n//   },\\n// ]\\n\\n\\nCUSTOM PROCESSOR\\n\\nFor advanced usage where complex processing is needed it's possible to use a\\ncallback that will receive content as an argument and should return it\\nprocessed.\\n\\nconst results = replace.sync({\\n  files: 'path/to/files/*.html',\\n  processor: (input) => input.replace(/foo/g, 'bar'),\\n});\\n\\n\\nARRAY OF CUSTOM PROCESSORS\\n\\nPassing processor function also supports passing an array of functions that will\\nbe executed sequentially\\n\\nfunction someProcessingA(input) {\\n  const chapters = input.split('###')\\n  chapters[1] = chapters[1].replace(/foo/g, 'bar')\\n  return chapters.join('###')\\n}\\n\\nfunction someProcessingB(input) {\\n  return input.replace(/foo/g, 'bar')\\n}\\n\\nconst results = replace.sync({\\n  files: 'path/to/files/*.html',\\n  processor: [someProcessingA, someProcessingB],\\n});\\n\\n\\nADVANCED USAGE\\n\\n\\nREPLACE A SINGLE FILE OR GLOB\\n\\nconst options = {\\n  files: 'path/to/file',\\n};\\n\\n\\nREPLACE MULTIPLE FILES OR GLOBS\\n\\nconst options = {\\n  files: [\\n    'path/to/file',\\n    'path/to/other/file',\\n    'path/to/files/*.html',\\n    'another/**/*.path',\\n  ],\\n};\\n\\n\\nREPLACE FIRST OCCURRENCE ONLY\\n\\nconst options = {\\n  from: 'foo',\\n  to: 'bar',\\n};\\n\\n\\nREPLACE ALL OCCURRENCES\\n\\nPlease note that the value specified in the from parameter is passed straight to\\nthe native String replace method\\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace].\\nAs such, if you pass a string as the from parameter, it will only replace the\\nfirst occurrence.\\n\\nTo replace multiple occurrences at once, you must use a regular expression for\\nthe from parameter with the global flag enabled, e.g. /foo/g.\\n\\nconst options = {\\n  from: /foo/g,\\n  to: 'bar',\\n};\\n\\n\\nMULTIPLE VALUES WITH THE SAME REPLACEMENT\\n\\nThese will be replaced sequentially.\\n\\nconst options = {\\n  from: [/foo/g, /baz/g],\\n  to: 'bar',\\n};\\n\\n\\nMULTIPLE VALUES WITH DIFFERENT REPLACEMENTS\\n\\nThese will be replaced sequentially.\\n\\nconst options = {\\n  from: [/foo/g, /baz/g],\\n  to: ['bar', 'bax'],\\n};\\n\\n\\nCUSTOM REGULAR EXPRESSIONS\\n\\nUse the RegExp\\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp]\\nconstructor to create any regular expression.\\n\\nconst str = 'foo';\\nconst regex = new RegExp('^' + str + 'bar', 'i');\\nconst options = {\\n  from: regex,\\n  to: 'bar',\\n};\\n\\n\\nUSING CALLBACKS FOR FROM\\n\\nYou can also specify a callback that returns a string or a regular expression.\\nThe callback receives the name of the file in which the replacement is being\\nperformed, thereby allowing the user to tailor the search string. The following\\nexample uses a callback to produce a search string dependent on the filename:\\n\\nconst options = {\\n  files: 'path/to/file',\\n  from: (file) => new RegExp(file, 'g'),\\n  to: 'bar',\\n};\\n\\n\\nUSING CALLBACKS FOR TO\\n\\nAs the to parameter is passed to the native String replace method\\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace],\\nyou can also specify a callback. The following example uses a callback to\\nconvert matching strings to lowercase:\\n\\nconst options = {\\n  files: 'path/to/file',\\n  from: /SomePattern[A-Za-z-]+/g,\\n  to: (match) => match.toLowerCase(),\\n};\\n\\nThis callback provides for an extra argument above the String replace method,\\nwhich is the name of the file in which the replacement is being performed. The\\nfollowing example replaces the matched string with the filename:\\n\\nconst options = {\\n  files: 'path/to/file',\\n  from: /SomePattern[A-Za-z-]+/g,\\n  to: (...args) => args.pop(),\\n};\\n\\n\\nIGNORE A SINGLE FILE OR GLOB\\n\\nconst options = {\\n  ignore: 'path/to/ignored/file',\\n};\\n\\n\\nIGNORE MULTIPLE FILES OR GLOBS\\n\\nconst options = {\\n  ignore: [\\n    'path/to/ignored/file',\\n    'path/to/other/ignored_file',\\n    'path/to/ignored_files/*.html',\\n    'another/**/*.ignore',\\n  ],\\n};\\n\\nPlease note that there is an open issue with Glob\\n[https://github.com/isaacs/node-glob/issues/309] that causes ignored patterns to\\nbe ignored when using a ./ prefix in your files glob. To work around this,\\nsimply remove the prefix, e.g. use **/* instead of ./**/*.\\n\\n\\nALLOW EMPTY/INVALID PATHS\\n\\nIf set to true, empty or invalid paths will fail silently and no error will be\\nthrown. For asynchronous replacement only. Defaults to false.\\n\\nconst options = {\\n  allowEmptyPaths: true,\\n};\\n\\n\\nDISABLE GLOBS\\n\\nYou can disable globs if needed using this flag. Use this when you run into\\nissues with file paths like files like //SERVER/share/file.txt. Defaults to\\nfalse.\\n\\nconst options = {\\n  disableGlobs: true,\\n};\\n\\n\\nSPECIFY GLOB CONFIGURATION\\n\\nSpecify configuration passed to the glob [https://www.npmjs.com/package/glob]\\ncall:\\n\\nconst options = {\\n  glob: {\\n\\n    //Glob settings here (examples given below)\\n    dot: true, //To include file names starting with a dot\\n    windowsPathsNoEscape: true, //To fix paths on Windows OS when path.join() is used to create paths\\n  },\\n};\\n\\nPlease note that the setting nodir will always be passed as false.\\n\\n\\nMAKING REPLACEMENTS ON NETWORK DRIVES\\n\\nTo make replacements in files on network drives, you may need to specify the UNC\\npath as the cwd config option. This will then be passed to glob and prefixed to\\nyour paths accordingly. See #56\\n[https://github.com/adamreisnz/replace-in-file/issues/56] for more details.\\n\\n\\nSPECIFY CHARACTER ENCODING\\n\\nUse a different character encoding for reading/writing files. Defaults to utf-8.\\n\\nconst options = {\\n  encoding: 'utf8',\\n};\\n\\n\\nDRY RUN\\n\\nTo do a dry run without actually making replacements, for testing purposes.\\nDefaults to false.\\n\\nconst options = {\\n  dry: true,\\n};\\n\\n\\nFILE SYSTEM\\n\\nreplace-in-file defaults to using require('fs') to provide file reading and\\nwrite APIs. You can provide an fs object of your own to switch to a different\\nfile system, such as a mock file system for unit tests.\\n\\n * If using asynchronous APIs, the provided fs must provide readFile and\\n   writeFile methods\\n * If using synchronous APIs, the provided fs must provide readFileSync and\\n   writeFileSync methods\\n\\nCustom fs methods should have the same parameters and returned values as their\\nbuilt-in Node fs [https://nodejs.org/api/fs.html] equivalents.\\n\\nreplaceInFile({\\n  from: 'a',\\n  fs: {\\n    readFile: (file, encoding, callback) => {\\n      console.log(`Reading ${file} with encoding ${encoding}...`);\\n      callback(null, 'fake file contents');\\n    },\\n    writeFile: (file, newContents, encoding, callback) => {\\n      console.log(`Writing ${file} with encoding ${encoding}: ${newContents}`);\\n      callback(null);\\n    },\\n  },\\n  to: 'b',\\n})\\n\\n\\nCLI USAGE\\n\\nreplace-in-file from to some/file.js,some/**/glob.js\\n  [--configFile=replace-config.js]\\n  [--ignore=ignore/files.js,ignore/**/glob.js]\\n  [--encoding=utf-8]\\n  [--disableGlobs]\\n  [--isRegex]\\n  [--verbose]\\n  [--quiet]\\n  [--dry]\\n\\nMultiple files or globs can be replaced by providing a comma separated list.\\n\\nThe flags --disableGlobs, --ignore and --encoding are supported in the CLI.\\n\\nThe setting allowEmptyPaths is not supported in the CLI as the replacement is\\nsynchronous, and this setting is only relevant for asynchronous replacement.\\n\\nTo list the changed files, use the --verbose flag. Success output can be\\nsuppressed by using the --quiet flag.\\n\\nTo do a dry run without making any actual changes, use --dry.\\n\\nA regular expression may be used for the from parameter by specifying the\\n--isRegex flag.\\n\\nThe from and to parameters, as well as the files list, can be omitted if you\\nprovide this information in a configuration file. You can provide a path to a\\nconfiguration file (either Javascript or JSON) with the --configFile flag. This\\npath will be resolved using Node’s built in path.resolve(), so you can pass in\\nan absolute or relative path.\\n\\n\\nA NOTE ON USING GLOBS WITH THE CLI\\n\\nWhen using the CLI, the glob pattern is handled by the operating system. But if\\nyou specify the glob pattern in the configuration file, the package will use the\\nglob module from the Node modules, and this can lead to different behaviour\\ndespite using the same pattern.\\n\\nFor example, the following will only look at top level files:\\n\\n//config.js\\nmodule.exports = {\\n  from: /cat/g,\\n  to: 'dog',\\n};\\n\\nreplace-in-file **  --configFile=config.js\\n\\nHowever, this example is recursive:\\n\\n//config.js\\nmodule.exports = {\\n  files: '**',\\n  from: /cat/g,\\n  to: 'dog',\\n};\\n\\nreplace-in-file --configFile=config.js\\n\\nIf you want to do a recursive file search as an argument you must use:\\n\\nreplace-in-file $(ls l {,**/}*)  --configFile=config.js\\n\\n\\nVERSION INFORMATION\\n\\nFrom version 3.0.0 onwards, replace in file requires Node 6 or higher. If you\\nneed support for Node 4 or 5, please use version 2.x.x.\\n\\nFrom version 5.0.0 onwards, replace in file requires Node 8 or higher. If you\\nneed support for Node 6, please use version 4.x.x.\\n\\nSee the Changelog\\n[https://github.com/adamreisnz/replace-in-file/blob/HEAD/CHANGELOG.md] for more\\ninformation.\\n\\n\\nLICENSE\\n\\n(MIT License)\\n\\nCopyright 2015-2023, Adam Reis, Co-founder at Hello Club\\n[https://helloclub.com/?source=npm] and Frello\\n[https://getfrello.com/?source=npm]\\n\\n\\nREADME\\n\\n\\nKEYWORDS\\n\\n * replace [/search?q=keywords:replace]\\n * text [/search?q=keywords:text]\\n * contents [/search?q=keywords:contents]\\n * file [/search?q=keywords:file]\\n\\n\\n\\n\\n\\n\\n\\n\\nPACKAGE SIDEBAR\\n\\n\\nINSTALL\\n\\nnpm i replace-in-file\\n\\n\\nREPOSITORY\\n\\nGitgithub.com/adamreisnz/replace-in-file\\n[https://github.com/adamreisnz/replace-in-file]\\n\\n\\nHOMEPAGE\\n\\ngithub.com/adamreisnz/replace-in-file#readme\\n[https://github.com/adamreisnz/replace-in-file#readme]\\n\\n\\nDOWNLOADSWEEKLY DOWNLOADS\\n\\n908,265\\n\\n\\nVERSION\\n\\n7.1.0\\n\\n\\nLICENSE\\n\\nMIT\\n\\n\\nUNPACKED SIZE\\n\\n101 kB\\n\\n\\nTOTAL FILES\\n\\n33\\n\\n\\nLAST PUBLISH\\n\\n4 months ago\\n\\n\\nCOLLABORATORS\\n\\n * adamreisnz\\n   [/npm-avatar/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdmF0YXJVUkwiOiJodHRwczovL3MuZ3JhdmF0YXIuY29tL2F2YXRhci9iMjA3ODlmOTMyYTcxOTEwYmZiMDBhYTA4MTExYzM2OT9zaXplPTEwMCZkZWZhdWx0PXJldHJvIn0.lS2g5BvhnBbYmRa09dhFFHqae1jc1HEohcuDmSotino]/~adamreisnz\\n\\nTry on RunKit [https://runkit.com/npm/replace-in-file]\\nReport malware\\n[/support?inquire=security&security-inquire=malware&package=replace-in-file&version=7.1.0]\\n\\n\\nFOOTER\\n\\nhttps://github.com/npm\\nhttps://github.com\\n\\n\\nSUPPORT\\n\\n * Help [https://docs.npmjs.com]\\n * Advisories [https://github.com/advisories]\\n * Status [http://status.npmjs.org/]\\n * Contact npm [/support]\\n\\n\\nCOMPANY\\n\\n * About [/about]\\n * Blog [https://github.blog/tag/npm/]\\n * Press [/press]\\n\\n\\nTERMS & POLICIES\\n\\n * Policies [/policies/]\\n * Terms of Use [/policies/terms]\\n * Code of Conduct [/policies/conduct]\\n * Privacy [/policies/privacy]\\n\\n\"}"}}