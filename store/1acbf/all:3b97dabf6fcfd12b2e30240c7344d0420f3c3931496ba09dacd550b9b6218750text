{"type":"object","value":{"https://www.npmjs.com/package/get-stream":"{\"type\":\"string\",\"value\":\"skip to:contentpackage searchsign in\\n❤\\n * Pro [/products/pro]\\n * Teams [/products/teams]\\n * Pricing [/products]\\n * Documentation [https://docs.npmjs.com]\\n\\nnpm\\n/\\n\\nSearch\\nSign Up [/signup]Sign In [/login]\\n\\n\\nGET-STREAM\\nDefinitelyTyped icon, indicating that this package has TypeScript declarations\\nprovided by the separate @types/get-stream package\\n[https://static-production.npmjs.com/6d9930e83bbb43bba93e22eda2871b55.svg]/package/@types/get-stream\\n\\n9.0.1 • Public • Published 2 months ago\\n * Readme [?activeTab=readme]\\n * Code Beta [?activeTab=code]\\n * 2 Dependencies [?activeTab=dependencies]\\n * 2,192 Dependents [?activeTab=dependents]\\n * 22 Versions [?activeTab=versions]\\n\\n\\nGET-STREAM\\n\\n> Get a stream as a string, Buffer, ArrayBuffer or array\\n\\n\\nFEATURES\\n\\n * Works in any JavaScript environment (Node.js, browsers, etc.).\\n * Supports text streams, binary streams and object streams.\\n * Supports async iterables.\\n * Can set a maximum stream size.\\n * Returns partially read data when the stream errors.\\n * Fast.\\n\\n\\nINSTALL\\n\\nnpm install get-stream\\n\\n\\nUSAGE\\n\\n\\nNODE.JS STREAMS\\n\\nimport fs from 'node:fs';\\nimport getStream from 'get-stream';\\n\\nconst stream = fs.createReadStream('unicorn.txt');\\n\\nconsole.log(await getStream(stream));\\n/*\\n              ,,))))))));,\\n           __)))))))))))))),\\n\\\\|/       -\\\\(((((''''((((((((.\\n-*-==//////((''  .     `)))))),\\n/|\\\\      ))| o    ;-.    '(((((                                  ,(,\\n         ( `|    /  )    ;))))'                               ,_))^;(~\\n            |   |   |   ,))((((_     _____------~~~-.        %,;(;(>';'~\\n            o_);   ;    )))(((` ~---~  `::           \\\\      %%~~)(v;(`('~\\n                  ;    ''''````         `:       `:::|\\\\,__,%%    );`'; ~\\n                 |   _                )     /      `:|`----'     `-'\\n           ______/\\\\/~    |                 /        /\\n         /~;;.____/;;'  /          ___--,-(   `;;;/\\n        / //  _;______;'------~~~~~    /;;/\\\\    /\\n       //  | |                        / ;   \\\\;;,\\\\\\n      (<_  | ;                      /',/-----'  _>\\n       \\\\_| ||_                     //~;~~~~~~~~~\\n           `\\\\_|                   (,~~\\n                                   \\\\~\\\\\\n                                    ~~\\n*/\\n\\n\\nWEB STREAMS\\n\\nimport getStream from 'get-stream';\\n\\nconst {body: readableStream} = await fetch('https://example.com');\\nconsole.log(await getStream(readableStream));\\n\\nThis works in any browser, even the ones\\n[https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream#browser_compatibility]\\nnot supporting ReadableStream.values() yet.\\n\\n\\nASYNC ITERABLES\\n\\nimport {opendir} from 'node:fs/promises';\\nimport {getStreamAsArray} from 'get-stream';\\n\\nconst asyncIterable = await opendir(directory);\\nconsole.log(await getStreamAsArray(asyncIterable));\\n\\n\\nAPI\\n\\nThe following methods read the stream's contents and return it as a promise.\\n\\n\\nGETSTREAM(STREAM, OPTIONS?)\\n\\nstream: stream.Readable\\n[https://nodejs.org/api/stream.html#class-streamreadable], ReadableStream\\n[https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream], or\\nAsyncIterable<string | Buffer | ArrayBuffer | DataView | TypedArray>\\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols]\\noptions: Options\\n\\nGet the given stream as a string.\\n\\n\\nGETSTREAMASBUFFER(STREAM, OPTIONS?)\\n\\nGet the given stream as a Node.js Buffer\\n[https://nodejs.org/api/buffer.html#class-buffer].\\n\\nimport {getStreamAsBuffer} from 'get-stream';\\n\\nconst stream = fs.createReadStream('unicorn.png');\\nconsole.log(await getStreamAsBuffer(stream));\\n\\n\\nGETSTREAMASARRAYBUFFER(STREAM, OPTIONS?)\\n\\nGet the given stream as an ArrayBuffer\\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer].\\n\\nimport {getStreamAsArrayBuffer} from 'get-stream';\\n\\nconst {body: readableStream} = await fetch('https://example.com');\\nconsole.log(await getStreamAsArrayBuffer(readableStream));\\n\\n\\nGETSTREAMASARRAY(STREAM, OPTIONS?)\\n\\nGet the given stream as an array. Unlike other methods, this supports streams of\\nobjects [https://nodejs.org/api/stream.html#object-mode].\\n\\nimport {getStreamAsArray} from 'get-stream';\\n\\nconst {body: readableStream} = await fetch('https://example.com');\\nconsole.log(await getStreamAsArray(readableStream));\\n\\nOPTIONS\\n\\nType: object\\n\\nMAXBUFFER\\n\\nType: number\\nDefault: Infinity\\n\\nMaximum length of the stream. If exceeded, the promise will be rejected with a\\nMaxBufferError.\\n\\nDepending on the method, the length is measured with string.length\\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length],\\nbuffer.length [https://nodejs.org/api/buffer.html#buflength],\\narrayBuffer.byteLength\\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/byteLength]\\nor array.length\\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length].\\n\\n\\nERRORS\\n\\nIf the stream errors, the returned promise will be rejected with the error. Any\\ncontents already read from the stream will be set to error.bufferedData, which\\nis a string, a Buffer, an ArrayBuffer or an array depending on the method used.\\n\\nimport getStream from 'get-stream';\\n\\ntry {\\n\\tawait getStream(streamThatErrorsAtTheEnd('unicorn'));\\n} catch (error) {\\n\\tconsole.log(error.bufferedData);\\n\\t//=> 'unicorn'\\n}\\n\\n\\nBROWSER SUPPORT\\n\\nFor this module to work in browsers, a bundler must be used that either:\\n\\n * Supports the exports.browser\\n   [https://nodejs.org/api/packages.html#community-conditions-definitions] field\\n   in package.json\\n * Strips or ignores node:* imports\\n\\nMost bundlers (such as Webpack\\n[https://webpack.js.org/guides/package-exports/#target-environment]) support\\neither of these.\\n\\nAdditionally, browsers support web streams and async iterables, but not Node.js\\nstreams.\\n\\n\\nTIPS\\n\\n\\nALTERNATIVES\\n\\nIf you do not need the maxBuffer option, error.bufferedData, nor browser\\nsupport, you can use the following methods instead of this package.\\n\\nSTREAMCONSUMERS.TEXT()\\n[https://nodejs.org/api/webstreams.html#streamconsumerstextstream]\\n\\nimport fs from 'node:fs';\\nimport {text} from 'node:stream/consumers';\\n\\nconst stream = fs.createReadStream('unicorn.txt', {encoding: 'utf8'});\\nconsole.log(await text(stream))\\n\\nSTREAMCONSUMERS.BUFFER()\\n[https://nodejs.org/api/webstreams.html#streamconsumersbufferstream]\\n\\nimport {buffer} from 'node:stream/consumers';\\n\\nconsole.log(await buffer(stream))\\n\\nSTREAMCONSUMERS.ARRAYBUFFER()\\n[https://nodejs.org/api/webstreams.html#streamconsumersarraybufferstream]\\n\\nimport {arrayBuffer} from 'node:stream/consumers';\\n\\nconsole.log(await arrayBuffer(stream))\\n\\nREADABLE.TOARRAY() [https://nodejs.org/api/stream.html#readabletoarrayoptions]\\n\\nconsole.log(await stream.toArray())\\n\\nARRAY.FROMASYNC()\\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fromAsync]\\n\\nIf your environment supports it\\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fromAsync#browser_compatibility]:\\n\\nconsole.log(await Array.fromAsync(stream))\\n\\n\\nNON-UTF-8 ENCODING\\n\\nWhen all of the following conditions apply:\\n\\n * getStream() is used (as opposed to getStreamAsBuffer() or\\n   getStreamAsArrayBuffer())\\n * The stream is binary (not text)\\n * The stream's encoding is not UTF-8 (for example, it is UTF-16, hexadecimal,\\n   or Base64)\\n\\nThen the stream must be decoded using a transform stream like TextDecoderStream\\n[https://developer.mozilla.org/en-US/docs/Web/API/TextDecoderStream] or b64\\n[https://github.com/hapijs/b64].\\n\\nimport getStream from 'get-stream';\\n\\nconst textDecoderStream = new TextDecoderStream('utf-16le');\\nconst {body: readableStream} = await fetch('https://example.com');\\nconsole.log(await getStream(readableStream.pipeThrough(textDecoderStream)));\\n\\n\\nBLOBS\\n\\ngetStreamAsArrayBuffer() can be used to create Blobs\\n[https://developer.mozilla.org/en-US/docs/Web/API/Blob].\\n\\nimport {getStreamAsArrayBuffer} from 'get-stream';\\n\\nconst stream = fs.createReadStream('unicorn.txt');\\nconsole.log(new Blob([await getStreamAsArrayBuffer(stream)]));\\n\\n\\nJSON STREAMING\\n\\ngetStreamAsArray() can be combined with JSON streaming utilities to parse JSON\\nincrementally.\\n\\nimport fs from 'node:fs';\\nimport {compose as composeStreams} from 'node:stream';\\nimport {getStreamAsArray} from 'get-stream';\\nimport streamJson from 'stream-json';\\nimport streamJsonArray from 'stream-json/streamers/StreamArray.js';\\n\\nconst stream = fs.createReadStream('big-array-of-objects.json');\\nconsole.log(await getStreamAsArray(\\n\\tcomposeStreams(stream, streamJson.parser(), streamJsonArray.streamArray()),\\n));\\n\\n\\nBENCHMARKS\\n\\n\\nNODE.JS STREAM (100 MB, BINARY)\\n\\n * getStream(): 142ms\\n * text(): 139ms\\n * getStreamAsBuffer(): 106ms\\n * buffer(): 83ms\\n * getStreamAsArrayBuffer(): 105ms\\n * arrayBuffer(): 81ms\\n * getStreamAsArray(): 24ms\\n * stream.toArray(): 21ms\\n\\n\\nNODE.JS STREAM (100 MB, TEXT)\\n\\n * getStream(): 90ms\\n * text(): 89ms\\n * getStreamAsBuffer(): 127ms\\n * buffer(): 192ms\\n * getStreamAsArrayBuffer(): 129ms\\n * arrayBuffer(): 195ms\\n * getStreamAsArray(): 89ms\\n * stream.toArray(): 90ms\\n\\n\\nWEB READABLESTREAM (100 MB, BINARY)\\n\\n * getStream(): 223ms\\n * text(): 221ms\\n * getStreamAsBuffer(): 182ms\\n * buffer(): 153ms\\n * getStreamAsArrayBuffer(): 171ms\\n * arrayBuffer(): 155ms\\n * getStreamAsArray(): 83ms\\n\\n\\nWEB READABLESTREAM (100 MB, TEXT)\\n\\n * getStream(): 141ms\\n * text(): 139ms\\n * getStreamAsBuffer(): 91ms\\n * buffer(): 80ms\\n * getStreamAsArrayBuffer(): 89ms\\n * arrayBuffer(): 81ms\\n * getStreamAsArray(): 21ms\\n\\nBenchmarks' source file\\n[https://github.com/sindresorhus/get-stream/blob/HEAD/benchmarks/index.js].\\n\\n\\nFAQ\\n\\n\\nHOW IS THIS DIFFERENT FROM CONCAT-STREAM\\n[https://github.com/maxogden/concat-stream]?\\n\\nThis module accepts a stream instead of being one and returns a promise instead\\nof using a callback. The API is simpler and it only supports returning a string,\\nBuffer, an ArrayBuffer or an array. It doesn't have a fragile type inference.\\nYou explicitly choose what you want. And it doesn't depend on the huge\\nreadable-stream package.\\n\\n\\nRELATED\\n\\n * get-stdin [https://github.com/sindresorhus/get-stdin] - Get stdin as a string\\n   or buffer\\n * into-stream [https://github.com/sindresorhus/into-stream] - The opposite of\\n   this package\\n\\n\\nREADME\\n\\n\\nKEYWORDS\\n\\n * get [/search?q=keywords:get]\\n * stream [/search?q=keywords:stream]\\n * promise [/search?q=keywords:promise]\\n * concat [/search?q=keywords:concat]\\n * string [/search?q=keywords:string]\\n * text [/search?q=keywords:text]\\n * buffer [/search?q=keywords:buffer]\\n * read [/search?q=keywords:read]\\n * data [/search?q=keywords:data]\\n * consume [/search?q=keywords:consume]\\n * readable [/search?q=keywords:readable]\\n * readablestream [/search?q=keywords:readablestream]\\n * object [/search?q=keywords:object]\\n * concat [/search?q=keywords:concat]\\n\\n\\n\\n\\n\\n\\n\\n\\nPACKAGE SIDEBAR\\n\\n\\nINSTALL\\n\\nnpm i get-stream\\n\\n\\nREPOSITORY\\n\\nGitgithub.com/sindresorhus/get-stream\\n[https://github.com/sindresorhus/get-stream]\\n\\n\\nHOMEPAGE\\n\\ngithub.com/sindresorhus/get-stream#readme\\n[https://github.com/sindresorhus/get-stream#readme]\\n\\nFund this package [https://github.com/sponsors/sindresorhus]\\n\\n\\nDOWNLOADSWEEKLY DOWNLOADS\\n\\n84,107,768\\n\\n\\nVERSION\\n\\n9.0.1\\n\\n\\nLICENSE\\n\\nMIT\\n\\n\\nUNPACKED SIZE\\n\\n28.4 kB\\n\\n\\nTOTAL FILES\\n\\n13\\n\\n\\nLAST PUBLISH\\n\\n2 months ago\\n\\n\\nCOLLABORATORS\\n\\n * sindresorhus\\n   [/npm-avatar/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdmF0YXJVUkwiOiJodHRwczovL3MuZ3JhdmF0YXIuY29tL2F2YXRhci9kMzZhOTIyMzdjNzVjNTMzN2MxN2I2MGQ5MDY4NmJmOT9zaXplPTEwMCZkZWZhdWx0PXJldHJvIn0.dDYAebLlFqNIyhWaiaemdRfFkjWlTwsEzFKHfFrqshM]/~sindresorhus\\n * ehmicky\\n   [/npm-avatar/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdmF0YXJVUkwiOiJodHRwczovL3MuZ3JhdmF0YXIuY29tL2F2YXRhci8yNzE5NjkxMzY5NjFkMGFlZTg1Mjg0ZWI4ZTFmMTI3ZD9zaXplPTEwMCZkZWZhdWx0PXJldHJvIn0.F2E9BXEjdyJDZbtAK6hWSMtoWuN93dL3jzV6ckUEl9Y]/~ehmicky\\n\\nTry on RunKit [https://runkit.com/npm/get-stream]\\nReport malware\\n[/support?inquire=security&security-inquire=malware&package=get-stream&version=9.0.1]\\n\\n\\nFOOTER\\n\\nhttps://github.com/npm\\nhttps://github.com\\n\\n\\nSUPPORT\\n\\n * Help [https://docs.npmjs.com]\\n * Advisories [https://github.com/advisories]\\n * Status [http://status.npmjs.org/]\\n * Contact npm [/support]\\n\\n\\nCOMPANY\\n\\n * About [/about]\\n * Blog [https://github.blog/tag/npm/]\\n * Press [/press]\\n\\n\\nTERMS & POLICIES\\n\\n * Policies [/policies/]\\n * Terms of Use [/policies/terms]\\n * Code of Conduct [/policies/conduct]\\n * Privacy [/policies/privacy]\\n\\n\"}"}}