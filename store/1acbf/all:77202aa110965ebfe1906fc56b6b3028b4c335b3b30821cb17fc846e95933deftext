{"type":"object","value":{"https://www.npmjs.com/package/diff":"{\"type\":\"string\",\"value\":\"skip to:contentpackage searchsign in\\n❤\\n * Pro [/products/pro]\\n * Teams [/products/teams]\\n * Pricing [/products]\\n * Documentation [https://docs.npmjs.com]\\n\\nnpm\\n/\\n\\nSearch\\nSign Up [/signup]Sign In [/login]\\n\\n\\nDIFF\\nDefinitelyTyped icon, indicating that this package has TypeScript declarations\\nprovided by the separate @types/diff package\\n[https://static-production.npmjs.com/6d9930e83bbb43bba93e22eda2871b55.svg]/package/@types/diff\\n\\n5.2.0 • Public • Published 3 months ago\\n * Readme [?activeTab=readme]\\n * Code Beta [?activeTab=code]\\n * 0 Dependencies [?activeTab=dependencies]\\n * 2,931 Dependents [?activeTab=dependents]\\n * 41 Versions [?activeTab=versions]\\n\\n\\nJSDIFF\\n\\nBuild Status\\n[https://camo.githubusercontent.com/c819332eb0cbd563e9b6c3ee893cacdeb3dffb86299c0dc781434e5379281f30/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f6b706465636b65722f6a73646966662e737667]http://travis-ci.org/kpdecker/jsdiff\\nSauce Test Status\\n[https://camo.githubusercontent.com/a283332cf533eec1275cd4473bce1a8b6f3c9fbd04dd499ff613a77416403483/68747470733a2f2f73617563656c6162732e636f6d2f6275696c647374617475732f6a7364696666]https://saucelabs.com/u/jsdiff\\n\\nA JavaScript text differencing implementation. Try it out in the online demo\\n[https://kpdecker.github.io/jsdiff].\\n\\nBased on the algorithm proposed in \\\"An O(ND) Difference Algorithm and its\\nVariations\\\" (Myers, 1986) [http://www.xmailserver.org/diff2.pdf].\\n\\n\\nINSTALLATION\\n\\nnpm install diff --save\\n\\n\\nUSAGE\\n\\nBroadly, jsdiff's diff functions all take an old text and a new text and perform\\nthree steps:\\n\\n 1. Split both texts into arrays of \\\"tokens\\\". What constitutes a token varies;\\n    in diffChars, each character is a token, while in diffLines, each line is a\\n    token.\\n\\n 2. Find the smallest set of single-token insertions and deletions needed to\\n    transform the first array of tokens into the second.\\n    \\n    This step depends upon having some notion of a token from the old array\\n    being \\\"equal\\\" to one from the new array, and this notion of equality affects\\n    the results. Usually two tokens are equal if === considers them equal, but\\n    some of the diff functions use an alternative notion of equality or have\\n    options to configure it. For instance, by default diffChars(\\\"Foo\\\", \\\"FOOD\\\")\\n    will require two deletions (o, o) and three insertions (O, O, D), but\\n    diffChars(\\\"Foo\\\", \\\"FOOD\\\", {ignoreCase: true}) will require just one insertion\\n    (of a D), since ignoreCase causes o and O to be considered equal.\\n\\n 3. Return an array representing the transformation computed in the previous\\n    step as a series of change objects. The array is ordered from the start of\\n    the input to the end, and each change object represents inserting one or\\n    more tokens, deleting one or more tokens, or keeping one or more tokens.\\n\\n\\nAPI\\n\\n * Diff.diffChars(oldStr, newStr[, options]) - diffs two blocks of text,\\n   treating each character as a token.\\n   \\n   Returns a list of change objects.\\n   \\n   Options\\n   \\n   * ignoreCase: If true, the uppercase and lowercase forms of a character are\\n     considered equal. Defaults to false.\\n\\n * Diff.diffWords(oldStr, newStr[, options]) - diffs two blocks of text,\\n   treating each word and each word separator (punctuation, newline, or run of\\n   whitespace) as a token.\\n   \\n   (Whitespace-only tokens are automatically treated as equal to each other, so\\n   changes like changing a space to a newline or a run of multiple spaces will\\n   be ignored.)\\n   \\n   Returns a list of change objects.\\n   \\n   Options\\n   \\n   * ignoreCase: Same as in diffChars. Defaults to false.\\n\\n * Diff.diffWordsWithSpace(oldStr, newStr[, options]) - same as diffWords,\\n   except whitespace-only tokens are not automatically considered equal, so e.g.\\n   changing a space to a tab is considered a change.\\n\\n * Diff.diffLines(oldStr, newStr[, options]) - diffs two blocks of text,\\n   treating each line as a token.\\n   \\n   Options\\n   \\n   * ignoreWhitespace: true to strip all leading and trailing whitespace\\n     characters from each line before performing the diff. Defaults to false.\\n   * stripTrailingCr: true to remove all trailing CR (\\\\r) characters before\\n     performing the diff. Defaults to false. This helps to get a useful diff\\n     when diffing UNIX text files against Windows text files.\\n   * newlineIsToken: true to treat the newline character at the end of each line\\n     as its own token. This allows for changes to the newline structure to occur\\n     independently of the line content and to be treated as such. In general\\n     this is the more human friendly form of diffLines; the default behavior\\n     with this option turned off is better suited for patches and other computer\\n     friendly output. Defaults to false.\\n   \\n   Returns a list of change objects.\\n\\n * Diff.diffTrimmedLines(oldStr, newStr[, options]) - diffs two blocks of text,\\n   comparing line by line, after stripping leading and trailing whitespace.\\n   Equivalent to calling diffLines with ignoreWhitespace: true.\\n   \\n   Options\\n   \\n   * stripTrailingCr: Same as in diffLines. Defaults to false.\\n   * newlineIsToken: Same as in diffLines. Defaults to false.\\n   \\n   Returns a list of change objects.\\n\\n * Diff.diffSentences(oldStr, newStr[, options]) - diffs two blocks of text,\\n   treating each sentence as a token.\\n   \\n   Returns a list of change objects.\\n\\n * Diff.diffCss(oldStr, newStr[, options]) - diffs two blocks of text, comparing\\n   CSS tokens.\\n   \\n   Returns a list of change objects.\\n\\n * Diff.diffJson(oldObj, newObj[, options]) - diffs two JSON-serializable\\n   objects by first serializing them to prettily-formatted JSON and then\\n   treating each line of the JSON as a token. Object properties are ordered\\n   alphabetically in the serialized JSON, so the order of properties in the\\n   objects being compared doesn't affect the result.\\n   \\n   Returns a list of change objects.\\n   \\n   Options\\n   \\n   * stringifyReplacer: A custom replacer function. Operates similarly to the\\n     replacer parameter to JSON.stringify()\\n     [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#the_replacer_parameter],\\n     but must be a function.\\n   * undefinedReplacement: A value to replace undefined with. Ignored if a\\n     stringifyReplacer is provided.\\n\\n * Diff.diffArrays(oldArr, newArr[, options]) - diffs two arrays of tokens,\\n   comparing each item for strict equality (===).\\n   \\n   Options\\n   \\n   * comparator: function(left, right) for custom equality checks\\n   \\n   Returns a list of change objects.\\n\\n * Diff.createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr[,\\n   oldHeader[, newHeader[, options]]]) - creates a unified diff patch by first\\n   computing a diff with diffLines and then serializing it to unified diff\\n   format.\\n   \\n   Parameters:\\n   \\n   * oldFileName : String to be output in the filename section of the patch for\\n     the removals\\n   * newFileName : String to be output in the filename section of the patch for\\n     the additions\\n   * oldStr : Original string value\\n   * newStr : New string value\\n   * oldHeader : Optional additional information to include in the old file\\n     header. Default: undefined.\\n   * newHeader : Optional additional information to include in the new file\\n     header. Default: undefined.\\n   * options : An object with options.\\n     * context describes how many lines of context should be included. You can\\n       set this to Number.MAX_SAFE_INTEGER or Infinity to include the entire\\n       file content in one hunk.\\n     * ignoreWhitespace: Same as in diffLines. Defaults to false.\\n     * stripTrailingCr: Same as in diffLines. Defaults to false.\\n     * newlineIsToken: Same as in diffLines. Defaults to false.\\n\\n * Diff.createPatch(fileName, oldStr, newStr[, oldHeader[, newHeader[,\\n   options]]]) - creates a unified diff patch.\\n   \\n   Just like Diff.createTwoFilesPatch, but with oldFileName being equal to\\n   newFileName.\\n\\n * Diff.formatPatch(patch) - creates a unified diff patch.\\n   \\n   patch may be either a single structured patch object (as returned by\\n   structuredPatch) or an array of them (as returned by parsePatch).\\n\\n * Diff.structuredPatch(oldFileName, newFileName, oldStr, newStr[, oldHeader[,\\n   newHeader[, options]]]) - returns an object with an array of hunk objects.\\n   \\n   This method is similar to createTwoFilesPatch, but returns a data structure\\n   suitable for further processing. Parameters are the same as\\n   createTwoFilesPatch. The data structure returned may look like this:\\n   \\n   {\\n     oldFileName: 'oldfile', newFileName: 'newfile',\\n     oldHeader: 'header1', newHeader: 'header2',\\n     hunks: [{\\n       oldStart: 1, oldLines: 3, newStart: 1, newLines: 3,\\n       lines: [' line2', ' line3', '-line4', '+line5', '\\\\\\\\ No newline at end of file'],\\n     }]\\n   }\\n\\n * Diff.applyPatch(source, patch[, options]) - attempts to apply a unified diff\\n   patch.\\n   \\n   If the patch was applied successfully, returns a string containing the\\n   patched text. If the patch could not be applied (because some hunks in the\\n   patch couldn't be fitted to the text in source), returns false.\\n   \\n   patch may be a string diff or the output from the parsePatch or\\n   structuredPatch methods.\\n   \\n   The optional options object may have the following keys:\\n   \\n   * fuzzFactor: Number of lines that are allowed to differ before rejecting a\\n     patch. Defaults to 0.\\n   * compareLine(lineNumber, line, operation, patchContent): Callback used to\\n     compare to given lines to determine if they should be considered equal when\\n     patching. Defaults to strict equality but may be overridden to provide\\n     fuzzier comparison. Should return false if the lines should be rejected.\\n\\n * Diff.applyPatches(patch, options) - applies one or more patches.\\n   \\n   patch may be either an array of structured patch objects, or a string\\n   representing a patch in unified diff format (which may patch one or more\\n   files).\\n   \\n   This method will iterate over the contents of the patch and apply to data\\n   provided through callbacks. The general flow for each patch index is:\\n   \\n   * options.loadFile(index, callback) is called. The caller should then load\\n     the contents of the file and then pass that to the callback(err, data)\\n     callback. Passing an err will terminate further patch execution.\\n   * options.patched(index, content, callback) is called once the patch has been\\n     applied. content will be the return value from applyPatch. When it's ready,\\n     the caller should call callback(err) callback. Passing an err will\\n     terminate further patch execution.\\n   \\n   Once all patches have been applied or an error occurs, the\\n   options.complete(err) callback is made.\\n\\n * Diff.parsePatch(diffStr) - Parses a patch into structured data\\n   \\n   Return a JSON object representation of the a patch, suitable for use with the\\n   applyPatch method. This parses to the same structure returned by\\n   Diff.structuredPatch.\\n\\n * Diff.reversePatch(patch) - Returns a new structured patch which when applied\\n   will undo the original patch.\\n   \\n   patch may be either a single structured patch object (as returned by\\n   structuredPatch) or an array of them (as returned by parsePatch).\\n\\n * Diff.convertChangesToXML(changes) - converts a list of change objects to a\\n   serialized XML format\\n\\n * Diff.convertChangesToDMP(changes) - converts a list of change objects to the\\n   format returned by Google's diff-match-patch\\n   [https://github.com/google/diff-match-patch] library\\n\\nUNIVERSAL OPTIONS\\n\\nCertain options can be provided in the options object of any method that\\ncalculates a diff:\\n\\n * callback: if provided, the diff will be computed in async mode to avoid\\n   blocking the event loop while the diff is calculated. The value of the\\n   callback option should be a function and will be passed the result of the\\n   diff as its second argument. The first argument will always be undefined.\\n   Only works with functions that return change objects, like diffLines, not\\n   those that return patches, like structuredPatch or createPatch.\\n   \\n   (Note that if the ONLY option you want to provide is a callback, you can pass\\n   the callback function directly as the options parameter instead of passing an\\n   object with a callback property.)\\n\\n * maxEditLength: a number specifying the maximum edit distance to consider\\n   between the old and new texts. If the edit distance is higher than this,\\n   jsdiff will return undefined instead of a diff. You can use this to limit the\\n   computational cost of diffing large, very different texts by giving up early\\n   if the cost will be huge. Works for functions that return change objects and\\n   also for structuredPatch, but not other patch-generation functions.\\n\\n * timeout: a number of milliseconds after which the diffing algorithm will\\n   abort and return undefined. Supported by the same functions as maxEditLength.\\n\\n\\nDEFINING CUSTOM DIFFING BEHAVIORS\\n\\nIf you need behavior a little different to what any of the text diffing\\nfunctions above offer, you can roll your own by customizing both the\\ntokenization behavior used and the notion of equality used to determine if two\\ntokens are equal.\\n\\nThe simplest way to customize tokenization behavior is to simply tokenize the\\ntexts you want to diff yourself, with your own code, then pass the arrays of\\ntokens to diffArrays. For instance, if you wanted a semantically-aware diff of\\nsome code, you could try tokenizing it using a parser specific to the\\nprogramming language the code is in, then passing the arrays of tokens to\\ndiffArrays.\\n\\nTo customize the notion of token equality used, use the comparator option to\\ndiffArrays.\\n\\nFor even more customisation of the diffing behavior, you can create a new\\nDiff.Diff() object, overwrite its castInput, tokenize, removeEmpty, equals, and\\njoin properties with your own functions, then call its diff(oldString,\\nnewString[, options]) method. The methods you can overwrite are used as follows:\\n\\n * castInput(value): used to transform the oldString and newString before any\\n   other steps in the diffing algorithm happen. For instance, diffJson uses\\n   castInput to serialize the objects being diffed to JSON. Defaults to a no-op.\\n * tokenize(value): used to convert each of oldString and newString (after\\n   they've gone through castInput) to an array of tokens. Defaults to returning\\n   value.split('') (returning an array of individual characters).\\n * removeEmpty(array): called on the arrays of tokens returned by tokenize and\\n   can be used to modify them. Defaults to stripping out falsey tokens, such as\\n   empty strings. diffArrays overrides this to simply return the array, which\\n   means that falsey values like empty strings can be handled like any other\\n   token by diffArrays.\\n * equals(left, right): called to determine if two tokens (one from the old\\n   string, one from the new string) should be considered equal. Defaults to\\n   comparing them with ===.\\n * join(tokens): gets called with an array of consecutive tokens that have\\n   either all been added, all been removed, or are all common. Needs to join\\n   them into a single value that can be used as the value property of the change\\n   object for these tokens. Defaults to simply returning tokens.join('').\\n\\n\\nCHANGE OBJECTS\\n\\nMany of the methods above return change objects. These objects consist of the\\nfollowing fields:\\n\\n * value: The concatenated content of all the tokens represented by this change\\n   object - i.e. generally the text that is either added, deleted, or common, as\\n   a single string. In cases where tokens are considered common but are\\n   non-identical (e.g. because an option like ignoreCase or a custom comparator\\n   was used), the value from the new string will be provided here.\\n * added: True if the value was inserted into the new string\\n * removed: True if the value was removed from the old string\\n * count: How many tokens (e.g. chars for diffChars, lines for diffLines) the\\n   value in the change object consists of\\n\\n(Change objects where added and removed are both falsey represent content that\\nis common to the old and new strings.)\\n\\nNote that some cases may omit a particular flag field. Comparison on the flag\\nfields should always be done in a truthy or falsy manner.\\n\\n\\nEXAMPLES\\n\\nBASIC EXAMPLE IN NODE\\n\\nrequire('colors');\\nconst Diff = require('diff');\\n\\nconst one = 'beep boop';\\nconst other = 'beep boob blah';\\n\\nconst diff = Diff.diffChars(one, other);\\n\\ndiff.forEach((part) => {\\n  // green for additions, red for deletions\\n  let text = part.added ? part.value.bgGreen :\\n             part.removed ? part.value.bgRed :\\n                            part.value;\\n  process.stderr.write(text);\\n});\\n\\nconsole.log();\\n\\nRunning the above program should yield\\n\\nNode Example\\n[https://raw.githubusercontent.com/kpdecker/jsdiff/HEAD/images/node_example.png]https://github.com/kpdecker/jsdiff/blob/HEAD/images/node_example.png\\n\\nBASIC EXAMPLE IN A WEB PAGE\\n\\n<pre id=\\\"display\\\"></pre>\\n<script src=\\\"diff.js\\\"></script>\\n<script>\\nconst one = 'beep boop',\\n    other = 'beep boob blah',\\n    color = '';\\n    \\nlet span = null;\\n\\nconst diff = Diff.diffChars(one, other),\\n    display = document.getElementById('display'),\\n    fragment = document.createDocumentFragment();\\n\\ndiff.forEach((part) => {\\n  // green for additions, red for deletions\\n  // grey for common parts\\n  const color = part.added ? 'green' :\\n    part.removed ? 'red' : 'grey';\\n  span = document.createElement('span');\\n  span.style.color = color;\\n  span.appendChild(document\\n    .createTextNode(part.value));\\n  fragment.appendChild(span);\\n});\\n\\ndisplay.appendChild(fragment);\\n</script>\\n\\nOpen the above .html file in a browser and you should see\\n\\nNode Example\\n[https://raw.githubusercontent.com/kpdecker/jsdiff/HEAD/images/web_example.png]https://github.com/kpdecker/jsdiff/blob/HEAD/images/web_example.png\\n\\nEXAMPLE OF GENERATING A PATCH FROM NODE\\n\\nThe code below is roughly equivalent to the Unix command diff -u file1.txt\\nfile2.txt > mydiff.patch:\\n\\nconst Diff = require('diff');\\nconst file1Contents = fs.readFileSync(\\\"file1.txt\\\").toString();\\nconst file2Contents = fs.readFileSync(\\\"file2.txt\\\").toString();\\nconst patch = Diff.createTwoFilesPatch(\\\"file1.txt\\\", \\\"file2.txt\\\", file1Contents, file2Contents);\\nfs.writeFileSync(\\\"mydiff.patch\\\", patch);\\n\\n\\nEXAMPLES OF PARSING AND APPLYING A PATCH FROM NODE\\n\\nAPPLYING A PATCH TO A SPECIFIED FILE\\n\\nThe code below is roughly equivalent to the Unix command patch file1.txt\\nmydiff.patch:\\n\\nconst Diff = require('diff');\\nconst file1Contents = fs.readFileSync(\\\"file1.txt\\\").toString();\\nconst patch = fs.readFileSync(\\\"mydiff.patch\\\").toString();\\nconst patchedFile = Diff.applyPatch(file1Contents, patch);\\nfs.writeFileSync(\\\"file1.txt\\\", patchedFile);\\n\\n\\nAPPLYING A MULTI-FILE PATCH TO THE FILES SPECIFIED BY THE PATCH FILE ITSELF\\n\\nThe code below is roughly equivalent to the Unix command patch < mydiff.patch:\\n\\nconst Diff = require('diff');\\nconst patch = fs.readFileSync(\\\"mydiff.patch\\\").toString();\\nDiff.applyPatches(patch, {\\n    loadFile: (patch, callback) => {\\n        let fileContents;\\n        try {\\n            fileContents = fs.readFileSync(patch.oldFileName).toString();\\n        } catch (e) {\\n            callback(`No such file: ${patch.oldFileName}`);\\n            return;\\n        }\\n        callback(undefined, fileContents);\\n    },\\n    patched: (patch, patchedContent, callback) => {\\n        if (patchedContent === false) {\\n            callback(`Failed to apply patch to ${patch.oldFileName}`)\\n            return;\\n        }\\n        fs.writeFileSync(patch.oldFileName, patchedContent);\\n        callback();\\n    },\\n    complete: (err) => {\\n        if (err) {\\n            console.log(\\\"Failed with error:\\\", err);\\n        }\\n    }\\n});\\n\\n\\n\\nCOMPATIBILITY\\n\\nSauce Test Status\\n[https://camo.githubusercontent.com/c719d964d6152582c7c26c3a98d03022af28871ae2e1dccdb3f8f124ad4a1e4b/68747470733a2f2f73617563656c6162732e636f6d2f62726f777365722d6d61747269782f6a73646966662e737667]https://saucelabs.com/u/jsdiff\\n\\njsdiff supports all ES3 environments with some known issues on IE8 and below.\\nUnder these browsers some diff algorithms such as word diff and others may fail\\ndue to lack of support for capturing groups in the split operation.\\n\\n\\nLICENSE\\n\\nSee LICENSE [https://github.com/kpdecker/jsdiff/blob/master/LICENSE].\\n\\n\\nDEVIATIONS FROM THE PUBLISHED MYERS DIFF ALGORITHM\\n\\njsdiff deviates from the published algorithm in a couple of ways that don't\\naffect results but do affect performance:\\n\\n * jsdiff keeps track of the diff for each diagonal using a linked list of\\n   change objects for each diagonal, rather than the historical array of\\n   furthest-reaching D-paths on each diagonal contemplated on page 8 of Myers's\\n   paper.\\n * jsdiff skips considering diagonals where the furthest-reaching D-path would\\n   go off the edge of the edit graph. This dramatically reduces the time cost\\n   (from quadratic to linear) in cases where the new text just appends or\\n   truncates content at the end of the old text.\\n\\n\\nREADME\\n\\n\\nKEYWORDS\\n\\n * diff [/search?q=keywords:diff]\\n * jsdiff [/search?q=keywords:jsdiff]\\n * compare [/search?q=keywords:compare]\\n * patch [/search?q=keywords:patch]\\n * text [/search?q=keywords:text]\\n * json [/search?q=keywords:json]\\n * css [/search?q=keywords:css]\\n * javascript [/search?q=keywords:javascript]\\n\\n\\n\\n\\n\\n\\n\\n\\nPACKAGE SIDEBAR\\n\\n\\nINSTALL\\n\\nnpm i diff\\n\\n\\nREPOSITORY\\n\\nGitgithub.com/kpdecker/jsdiff [https://github.com/kpdecker/jsdiff]\\n\\n\\nHOMEPAGE\\n\\ngithub.com/kpdecker/jsdiff#readme [https://github.com/kpdecker/jsdiff#readme]\\n\\n\\nDOWNLOADSWEEKLY DOWNLOADS\\n\\n36,490,032\\n\\n\\nVERSION\\n\\n5.2.0\\n\\n\\nLICENSE\\n\\nBSD-3-Clause\\n\\n\\nUNPACKED SIZE\\n\\n429 kB\\n\\n\\nTOTAL FILES\\n\\n36\\n\\n\\nLAST PUBLISH\\n\\n3 months ago\\n\\n\\nCOLLABORATORS\\n\\n * kpdecker\\n   [/npm-avatar/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdmF0YXJVUkwiOiJodHRwczovL3MuZ3JhdmF0YXIuY29tL2F2YXRhci8xYjI1ZTcxMjNhMmQwYWRkYzM5M2E1ZDBkNDA3MDI3Mz9zaXplPTEwMCZkZWZhdWx0PXJldHJvIn0.52TSBDU_A_e8oNqClSA1eALJXGKEGztSwGA9ziAzmk4]/~kpdecker\\n * explodingcabbage\\n   [/npm-avatar/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdmF0YXJVUkwiOiJodHRwczovL3MuZ3JhdmF0YXIuY29tL2F2YXRhci83N2YyZWI0YTFkNmM0MGQ0OTczZTYxNmViZTI5NzcyYz9zaXplPTEwMCZkZWZhdWx0PXJldHJvIn0.xQUYlLujlZvLNHdEPyl8wPzrjUVC1YAAEz91kdzBdic]/~explodingcabbage\\n\\nTry on RunKit [https://runkit.com/npm/diff]\\nReport malware\\n[/support?inquire=security&security-inquire=malware&package=diff&version=5.2.0]\\n\\n\\nFOOTER\\n\\nhttps://github.com/npm\\nhttps://github.com\\n\\n\\nSUPPORT\\n\\n * Help [https://docs.npmjs.com]\\n * Advisories [https://github.com/advisories]\\n * Status [http://status.npmjs.org/]\\n * Contact npm [/support]\\n\\n\\nCOMPANY\\n\\n * About [/about]\\n * Blog [https://github.blog/tag/npm/]\\n * Press [/press]\\n\\n\\nTERMS & POLICIES\\n\\n * Policies [/policies/]\\n * Terms of Use [/policies/terms]\\n * Code of Conduct [/policies/conduct]\\n * Privacy [/policies/privacy]\\n\\n\"}"}}