{"type":"object","value":{"https://www.npmjs.com/package/fs-extra#keywords":"{\"type\":\"string\",\"value\":\"skip to:contentpackage searchsign in\\n❤\\n * Pro [/products/pro]\\n * Teams [/products/teams]\\n * Pricing [/products]\\n * Documentation [https://docs.npmjs.com]\\n\\nnpm\\n/\\n\\nSearch\\nSign Up [/signup]Sign In [/login]\\n\\n\\nFS-EXTRA\\nDefinitelyTyped icon, indicating that this package has TypeScript declarations\\nprovided by the separate @types/fs-extra package\\n[https://static-production.npmjs.com/6d9930e83bbb43bba93e22eda2871b55.svg]/package/@types/fs-extra\\n\\n11.2.0 • Public • Published 5 months ago\\n * Readme [?activeTab=readme]\\n * Code Beta [?activeTab=code]\\n * 3 Dependencies [?activeTab=dependencies]\\n * 65,250 Dependents [?activeTab=dependents]\\n * 96 Versions [?activeTab=versions]\\n\\n\\nNODE.JS: FS-EXTRA\\n\\nfs-extra adds file system methods that aren't included in the native fs module\\nand adds promise support to the fs methods. It also uses graceful-fs\\n[https://github.com/isaacs/node-graceful-fs] to prevent EMFILE errors. It should\\nbe a drop in replacement for fs.\\n\\nnpm Package\\n[https://camo.githubusercontent.com/c4ba0cccf0964a58385fa52013d118ff1b71cf712ad9ab0be98f289ae3ce8405/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f66732d65787472612e737667]https://www.npmjs.org/package/fs-extra\\nLicense\\n[https://camo.githubusercontent.com/87d155628d3ea94b0a5b913bdc71806dd10c511a81850ac0c50ad91a5a6afba2/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f6c2f66732d65787472612e737667]https://github.com/jprichardson/node-fs-extra/blob/master/LICENSE\\nbuild status\\n[https://camo.githubusercontent.com/93462d5f6bbc76050580620f51926dac0ca36bfd4cfbfdf410f090501ef33669/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f616374696f6e732f776f726b666c6f772f7374617475732f6a7072696368617264736f6e2f6e6f64652d66732d65787472612f63692e796d6c3f6272616e63683d6d6173746572]https://github.com/jprichardson/node-fs-extra/actions/workflows/ci.yml?query=branch%3Amaster\\ndownloads per month\\n[https://camo.githubusercontent.com/766a1f5e63ddbf4a300dd937dd09f315ce90278007a5b3a33c5a4f3b7fbe4ef4/687474703a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f66732d65787472612e737667]https://www.npmjs.org/package/fs-extra\\nJavaScript Style Guide\\n[https://camo.githubusercontent.com/bde227e3207c7143032c0feb73889ffbda8eb1ef234b820b915ccaf74f9c66d7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64655f7374796c652d7374616e646172642d627269676874677265656e2e737667]https://standardjs.com\\n\\n\\nWHY?\\n\\nI got tired of including mkdirp, rimraf, and ncp in most of my projects.\\n\\n\\nINSTALLATION\\n\\nnpm install fs-extra\\n\\n\\n\\nUSAGE\\n\\n\\nCOMMONJS\\n\\nfs-extra is a drop in replacement for native fs. All methods in fs are attached\\nto fs-extra. All fs methods return promises if the callback isn't passed.\\n\\nYou don't ever need to include the original fs module again:\\n\\nconst fs = require('fs') // this is no longer necessary\\n\\nyou can now do this:\\n\\nconst fs = require('fs-extra')\\n\\nor if you prefer to make it clear that you're using fs-extra and not fs, you may\\nwant to name your fs variable fse like so:\\n\\nconst fse = require('fs-extra')\\n\\nyou can also keep both, but it's redundant:\\n\\nconst fs = require('fs')\\nconst fse = require('fs-extra')\\n\\n\\nESM\\n\\nThere is also an fs-extra/esm import, that supports both default and named\\nexports. However, note that fs methods are not included in fs-extra/esm; you\\nstill need to import fs and/or fs/promises seperately:\\n\\nimport { readFileSync } from 'fs'\\nimport { readFile } from 'fs/promises'\\nimport { outputFile, outputFileSync } from 'fs-extra/esm'\\n\\nDefault exports are supported:\\n\\nimport fs from 'fs'\\nimport fse from 'fs-extra/esm'\\n// fse.readFileSync is not a function; must use fs.readFileSync\\n\\nbut you probably want to just use regular fs-extra instead of fs-extra/esm for\\ndefault exports:\\n\\nimport fs from 'fs-extra'\\n// both fs and fs-extra methods are defined\\n\\n\\nSYNC VS ASYNC VS ASYNC/AWAIT\\n\\nMost methods are async by default. All async methods will return a promise if\\nthe callback isn't passed.\\n\\nSync methods on the other hand will throw if an error occurs.\\n\\nAlso Async/Await will throw an error if one occurs.\\n\\nExample:\\n\\nconst fs = require('fs-extra')\\n\\n// Async with promises:\\nfs.copy('/tmp/myfile', '/tmp/mynewfile')\\n  .then(() => console.log('success!'))\\n  .catch(err => console.error(err))\\n\\n// Async with callbacks:\\nfs.copy('/tmp/myfile', '/tmp/mynewfile', err => {\\n  if (err) return console.error(err)\\n  console.log('success!')\\n})\\n\\n// Sync:\\ntry {\\n  fs.copySync('/tmp/myfile', '/tmp/mynewfile')\\n  console.log('success!')\\n} catch (err) {\\n  console.error(err)\\n}\\n\\n// Async/Await:\\nasync function copyFiles () {\\n  try {\\n    await fs.copy('/tmp/myfile', '/tmp/mynewfile')\\n    console.log('success!')\\n  } catch (err) {\\n    console.error(err)\\n  }\\n}\\n\\ncopyFiles()\\n\\n\\nMETHODS\\n\\n\\nASYNC\\n\\n * copy [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/copy.md]\\n * emptyDir\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/emptyDir.md]\\n * ensureFile\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/ensureFile.md]\\n * ensureDir\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/ensureDir.md]\\n * ensureLink\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/ensureLink.md]\\n * ensureSymlink\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/ensureSymlink.md]\\n * mkdirp\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/ensureDir.md]\\n * mkdirs\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/ensureDir.md]\\n * move [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/move.md]\\n * outputFile\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/outputFile.md]\\n * outputJson\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/outputJson.md]\\n * pathExists\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/pathExists.md]\\n * readJson\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/readJson.md]\\n * remove\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/remove.md]\\n * writeJson\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/writeJson.md]\\n\\n\\nSYNC\\n\\n * copySync\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/copy-sync.md]\\n * emptyDirSync\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/emptyDir-sync.md]\\n * ensureFileSync\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/ensureFile-sync.md]\\n * ensureDirSync\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/ensureDir-sync.md]\\n * ensureLinkSync\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/ensureLink-sync.md]\\n * ensureSymlinkSync\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/ensureSymlink-sync.md]\\n * mkdirpSync\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/ensureDir-sync.md]\\n * mkdirsSync\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/ensureDir-sync.md]\\n * moveSync\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/move-sync.md]\\n * outputFileSync\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/outputFile-sync.md]\\n * outputJsonSync\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/outputJson-sync.md]\\n * pathExistsSync\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/pathExists-sync.md]\\n * readJsonSync\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/readJson-sync.md]\\n * removeSync\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/remove-sync.md]\\n * writeJsonSync\\n   [https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/writeJson-sync.md]\\n\\nNOTE: You can still use the native Node.js methods. They are promisified and\\ncopied over to fs-extra. See notes on fs.read(), fs.write(), & fs.writev()\\n[https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/fs-read-write-writev.md]\\n\\n\\nWHAT HAPPENED TO WALK() AND WALKSYNC()?\\n\\nThey were removed from fs-extra in v2.0.0. If you need the functionality, walk\\nand walkSync are available as separate packages, klaw\\n[https://github.com/jprichardson/node-klaw] and klaw-sync\\n[https://github.com/manidlou/node-klaw-sync].\\n\\n\\nTHIRD PARTY\\n\\n\\nCLI\\n\\nfse-cli [https://www.npmjs.com/package/@atao60/fse-cli] allows you to run\\nfs-extra from a console or from npm [https://www.npmjs.com] scripts.\\n\\n\\nTYPESCRIPT\\n\\nIf you like TypeScript, you can use fs-extra with it:\\nhttps://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/fs-extra\\n[https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/fs-extra]\\n\\n\\nFILE / DIRECTORY WATCHING\\n\\nIf you want to watch for changes to files or directories, then you should use\\nchokidar [https://github.com/paulmillr/chokidar].\\n\\n\\nOBTAIN FILESYSTEM (DEVICES, PARTITIONS) INFORMATION\\n\\nfs-filesystem [https://github.com/arthurintelligence/node-fs-filesystem] allows\\nyou to read the state of the filesystem of the host on which it is run. It\\nreturns information about both the devices and the partitions (volumes) of the\\nsystem.\\n\\n\\nMISC.\\n\\n * fs-extra-debug [https://github.com/jdxcode/fs-extra-debug] - Send your\\n   fs-extra calls to debug [https://npmjs.org/package/debug].\\n * mfs [https://github.com/cadorn/mfs] - Monitor your fs-extra calls.\\n\\n\\nHACKING ON FS-EXTRA\\n\\nWanna hack on fs-extra? Great! Your help is needed! fs-extra is one of the most\\ndepended upon Node.js packages\\n[http://nodei.co/npm/fs-extra.png?downloads=true&downloadRank=true&stars=true].\\nThis project uses JavaScript Standard Style [https://github.com/feross/standard]\\n- if the name or style choices bother you, you're gonna have to get over it :)\\nIf standard is good enough for npm, it's good enough for fs-extra.\\n\\njs-standard-style\\n[https://camo.githubusercontent.com/3f7317235f4a4220e4384f3065e200ac756dc22d496bc3eb8fde2d512c8c8f05/68747470733a2f2f63646e2e7261776769742e636f6d2f6665726f73732f7374616e646172642f6d61737465722f62616467652e737667]https://github.com/feross/standard\\n\\nWhat's needed?\\n\\n * First, take a look at existing issues. Those are probably going to be where\\n   the priority lies.\\n * More tests for edge cases. Specifically on different platforms. There can\\n   never be enough tests.\\n * Improve test coverage.\\n\\nNote: If you make any big changes, you should definitely file an issue for\\ndiscussion first.\\n\\n\\nRUNNING THE TEST SUITE\\n\\nfs-extra contains hundreds of tests.\\n\\n * npm run lint: runs the linter (standard [http://standardjs.com/])\\n * npm run unit: runs the unit tests\\n * npm run unit-esm: runs tests for fs-extra/esm exports\\n * npm test: runs the linter and all tests\\n\\nWhen running unit tests, set the environment variable CROSS_DEVICE_PATH to the\\nabsolute path of an empty directory on another device (like a thumb drive) to\\nenable cross-device move tests.\\n\\n\\nWINDOWS\\n\\nIf you run the tests on the Windows and receive a lot of symbolic link EPERM\\npermission errors, it's because on Windows you need elevated privilege to create\\nsymbolic links. You can add this to your Windows's account by following the\\ninstructions here:\\nhttp://superuser.com/questions/104845/permission-to-make-symbolic-links-in-windows-7\\n[http://superuser.com/questions/104845/permission-to-make-symbolic-links-in-windows-7]\\nHowever, I didn't have much luck doing this.\\n\\nSince I develop on Mac OS X, I use VMWare Fusion for Windows testing. I create a\\nshared folder that I map to a drive on Windows. I open the Node.js command\\nprompt and run as Administrator. I then map the network drive running the\\nfollowing command:\\n\\nnet use z: \\\"\\\\\\\\vmware-host\\\\Shared Folders\\\"\\n\\n\\nI can then navigate to my fs-extra directory and run the tests.\\n\\n\\nNAMING\\n\\nI put a lot of thought into the naming of these functions. Inspired by\\n@coolaj86's request. So he deserves much of the credit for raising the issue.\\nSee discussion(s) here:\\n\\n * https://github.com/jprichardson/node-fs-extra/issues/2\\n   [https://github.com/jprichardson/node-fs-extra/issues/2]\\n * https://github.com/flatiron/utile/issues/11\\n   [https://github.com/flatiron/utile/issues/11]\\n * https://github.com/ryanmcgrath/wrench-js/issues/29\\n   [https://github.com/ryanmcgrath/wrench-js/issues/29]\\n * https://github.com/substack/node-mkdirp/issues/17\\n   [https://github.com/substack/node-mkdirp/issues/17]\\n\\nFirst, I believe that in as many cases as possible, the Node.js naming schemes\\n[http://nodejs.org/api/fs.html] should be chosen. However, there are problems\\nwith the Node.js own naming schemes.\\n\\nFor example, fs.readFile() and fs.readdir(): the F is capitalized in File and\\nthe d is not capitalized in dir. Perhaps a bit pedantic, but they should still\\nbe consistent. Also, Node.js has chosen a lot of POSIX naming schemes, which I\\nbelieve is great. See: fs.mkdir(), fs.rmdir(), fs.chown(), etc.\\n\\nWe have a dilemma though. How do you consistently name methods that perform the\\nfollowing POSIX commands: cp, cp -r, mkdir -p, and rm -rf?\\n\\nMy perspective: when in doubt, err on the side of simplicity. A directory is\\njust a hierarchical grouping of directories and files. Consider that for a\\nmoment. So when you want to copy it or remove it, in most cases you'll want to\\ncopy or remove all of its contents. When you want to create a directory, if the\\ndirectory that it's suppose to be contained in does not exist, then in most\\ncases you'll want to create that too.\\n\\nSo, if you want to remove a file or a directory regardless of whether it has\\ncontents, just call fs.remove(path). If you want to copy a file or a directory\\nwhether it has contents, just call fs.copy(source, destination). If you want to\\ncreate a directory regardless of whether its parent directories exist, just call\\nfs.mkdirs(path) or fs.mkdirp(path).\\n\\n\\nCREDIT\\n\\nfs-extra wouldn't be possible without using the modules from the following\\nauthors:\\n\\n * Isaac Shlueter [https://github.com/isaacs]\\n * Charlie McConnel [https://github.com/avianflu]\\n * James Halliday [https://github.com/substack]\\n * Andrew Kelley [https://github.com/andrewrk]\\n\\n\\nLICENSE\\n\\nLicensed under MIT\\n\\nCopyright (c) 2011-2017 JP Richardson [https://github.com/jprichardson]\\n\\n\\nREADME\\n\\n\\nKEYWORDS\\n\\n * fs [/search?q=keywords:fs]\\n * file [/search?q=keywords:file]\\n * file system [/search?q=keywords:file system]\\n * copy [/search?q=keywords:copy]\\n * directory [/search?q=keywords:directory]\\n * extra [/search?q=keywords:extra]\\n * mkdirp [/search?q=keywords:mkdirp]\\n * mkdir [/search?q=keywords:mkdir]\\n * mkdirs [/search?q=keywords:mkdirs]\\n * recursive [/search?q=keywords:recursive]\\n * json [/search?q=keywords:json]\\n * read [/search?q=keywords:read]\\n * write [/search?q=keywords:write]\\n * extra [/search?q=keywords:extra]\\n * delete [/search?q=keywords:delete]\\n * remove [/search?q=keywords:remove]\\n * touch [/search?q=keywords:touch]\\n * create [/search?q=keywords:create]\\n * text [/search?q=keywords:text]\\n * output [/search?q=keywords:output]\\n * move [/search?q=keywords:move]\\n * promise [/search?q=keywords:promise]\\n\\n\\n\\n\\n\\n\\n\\n\\nPACKAGE SIDEBAR\\n\\n\\nINSTALL\\n\\nnpm i fs-extra\\n\\n\\nREPOSITORY\\n\\nGitgithub.com/jprichardson/node-fs-extra\\n[https://github.com/jprichardson/node-fs-extra]\\n\\n\\nHOMEPAGE\\n\\ngithub.com/jprichardson/node-fs-extra\\n[https://github.com/jprichardson/node-fs-extra]\\n\\n\\nDOWNLOADSWEEKLY DOWNLOADS\\n\\n86,146,252\\n\\n\\nVERSION\\n\\n11.2.0\\n\\n\\nLICENSE\\n\\nMIT\\n\\n\\nUNPACKED SIZE\\n\\n54.9 kB\\n\\n\\nTOTAL FILES\\n\\n31\\n\\n\\nLAST PUBLISH\\n\\n5 months ago\\n\\n\\nCOLLABORATORS\\n\\n * jprichardson\\n   [/npm-avatar/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdmF0YXJVUkwiOiJodHRwczovL3MuZ3JhdmF0YXIuY29tL2F2YXRhci8wZjU2YTVlNDI5ZGUwMDlhMjdiMGFlOGY3OTZlZjJkZj9zaXplPTEwMCZkZWZhdWx0PXJldHJvIn0.0i-faVNjJkYJH_L_zLIX7M1d1RwV2M-JqFHAXbBExsM]/~jprichardson\\n * ryanzim\\n   [/npm-avatar/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdmF0YXJVUkwiOiJodHRwczovL3MuZ3JhdmF0YXIuY29tL2F2YXRhci83ZWU0Y2Q4YjY2YWY4NDU5ZjE3MDYyNDBjMTgzM2EwZj9zaXplPTEwMCZkZWZhdWx0PXJldHJvIn0.a7Lut6Mt0a598bnNpR9SBCjF8aEeSwHZ79mNHFRGDcI]/~ryanzim\\n * manidlou\\n   [/npm-avatar/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdmF0YXJVUkwiOiJodHRwczovL3MuZ3JhdmF0YXIuY29tL2F2YXRhci84MjRiM2I3ZGE0ODEzZmQ3YzRhNGE4NzhlN2FiNDdjMT9zaXplPTEwMCZkZWZhdWx0PXJldHJvIn0.fj9EBHZcxthEAphGZXz5i7pviFfHaDQqWM5p7Nm3jAg]/~manidlou\\n\\nTry on RunKit [https://runkit.com/npm/fs-extra]\\nReport malware\\n[/support?inquire=security&security-inquire=malware&package=fs-extra&version=11.2.0]\\n\\n\\nFOOTER\\n\\nhttps://github.com/npm\\nhttps://github.com\\n\\n\\nSUPPORT\\n\\n * Help [https://docs.npmjs.com]\\n * Advisories [https://github.com/advisories]\\n * Status [http://status.npmjs.org/]\\n * Contact npm [/support]\\n\\n\\nCOMPANY\\n\\n * About [/about]\\n * Blog [https://github.blog/tag/npm/]\\n * Press [/press]\\n\\n\\nTERMS & POLICIES\\n\\n * Policies [/policies/]\\n * Terms of Use [/policies/terms]\\n * Code of Conduct [/policies/conduct]\\n * Privacy [/policies/privacy]\\n\\n\"}"}}